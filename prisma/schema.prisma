generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  name        String
  userNo      String        @unique
  password    String
  image       String?
  fName       String?
  fJob        String?
  fPhone      String?
  mName       String?
  mJob        String?
  mPhone      String?
  tPhone      String?
  age         Int?
  schoolClass String?
  role        Role          @default(STUDENT)
  classId     String?
  lastLogin   DateTime?
  class       Class?        @relation(fields: [classId], references: [id], onDelete: SetNull)
  transaction Transaction[]
  accounts    Account[]
  sessions    Session[]

  @@index([classId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Class {
  id            String       @id @default(cuid())
  name          String       @unique
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  location      Location
  regularHour   Int
  startingMonth DateTime
  EndingMonth   DateTime
  user          User[]
  ClassPage     ClassPage?
  task          Task[]
  regularDay    regularDay[]
}

model regularDay {
  id         String @id @default(cuid())
  regularDay Int
  classId    String
  class      Class  @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@index([classId])
}

model Task {
  id        String   @id @default(cuid())
  name      String
  fileLink  String   @unique
  createdAt DateTime @default(now())
  deadline  DateTime
  classId   String
  class     Class?   @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@index([classId])
}

model Transaction {
  id             String         @id @default(cuid())
  transactionFor TransactionFor
  amount         Float
  userId         String
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([transactionFor, userId])
  @@index([userId])
  @@index([transactionFor])
}

model ClassPage {
  id       String    @id @default(cuid())
  classId  String    @unique
  class    Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  elements Element[]
}

model Element {
  id          String    @id @default(cuid())
  layoutId    Int       @default(1)
  className   String
  layout      String
  content     String
  classPageId String
  ClassPage   ClassPage @relation(fields: [classPageId], references: [id], onDelete: Cascade)

  @@unique([layoutId, className])
  @@index([classPageId])
}

model NotificationSetting {
  id              String                   @id @default(cuid())
  reportingEmail  String
  notificationFor NotificationForSetting[]
}

model NotificationForSetting {
  id                    String              @id @default(cuid())
  notificateFor         NotificationFor
  notificationSettingId String
  enabled               Boolean             @default(false)
  NotificationSetting   NotificationSetting @relation(fields: [notificationSettingId], references: [id], onDelete: Cascade)

  @@unique([notificateFor, notificationSettingId])
  @@index([notificationSettingId])
}

enum Role {
  STUDENT
  ADMIN
}

enum Location {
  ATAKUM
  PERA
}

enum TransactionFor {
  MATERYAL1
  MATERYAL2
  OCAK
  SUBAT
  MART
  NISAN
  MAYIS
  HAZIRAN
  TEMMUZ
  AGUSTOS
  EYLUL
  EKIM
  KASIM
  ARALIK
}

enum NotificationFor {
  MATERYAL1
  MATERYAL2
  AYLAR
}
